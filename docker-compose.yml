version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PORT=3000
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=team_polls
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ENABLED=true
      - JWT_SECRET=your_jwt_secret_key_change_this_in_production
      - JWT_EXPIRY=1h
      - CORS_ORIGIN=*
      - USE_CLUSTER=false
    volumes:
      - ./:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # For production scaling, uncomment and adjust the number of replicas
  # app-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   deploy:
  #     replicas: 4
  #   depends_on:
  #     - postgres
  #     - redis
  #   environment:
  #     - PORT=3000
  #     - NODE_ENV=production
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=postgres
  #     - DB_DATABASE=team_polls
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_ENABLED=true
  #     - JWT_SECRET=your_jwt_secret_key_change_this_in_production
  #     - JWT_EXPIRY=1h
  #     - CORS_ORIGIN=*
  #     - USE_CLUSTER=true
  #   restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: team_polls
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Uncomment for production deployment with load balancing
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - app
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data: